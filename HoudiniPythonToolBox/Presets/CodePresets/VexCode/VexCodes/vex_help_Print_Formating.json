{"tag": ["vex_help"], "class": 0, "info": "string var_string = \"abcdef\";\nfloat var_float = 1.23456789;\nint var_int = 256;\n\nprintf(\"string: %+1s, float: %10.3f, integer: %-6d \\n\", var_string, var_float, var_int);\n// string = abcdef\n// %[+-][length]s \n\n//____\u8868\u793a\u7a7a\u683c,\u5360\u4f4d\u7b26\n// %10s   -> ____abcdef         //\u5b57\u7b26\u4e32,\u5360\u4f4d10\u4e2a\u5b57\u7b26\u4f4d\n// %-10s  -> abcdef____         //\u5b57\u7b26\u4e32,\u5360\u4f4d10\u4e2a\u5b57\u7b26\u4f4d,\u5de6\u5bf9\u9f50\n// %+10s  -> __\"abcdef\"         //\u5b57\u7b26\u4e32,\u5360\u4f4d10\u4e2a\u5b57\u7b26\u4f4d,\u5b57\u7b26\u4e32\u88ab\u53cc\u5f15\u53f7\u5f15\u8d77\u6765\n// %+-10s -> \"abcdef\"__         //\u5b57\u7b26\u4e32,\u5360\u4f4d10\u4e2a\u5b57\u7b26\u4f4d,\u5b57\u7b26\u4e32\u88ab\u53cc\u5f15\u53f7\u5f15\u8d77\u6765,\u5de6\u5bf9\u9f50\n\n \n// float = 1.23456789\n// %[+-][0][length][precision]f\n\n// %8.3f  -> ___1.235                 //3\u4f4d\u5c0f\u6570\u6d6e\u70b9,\u5360\u4f4d8\u4e2a\u5b57\u7b26\u4f4d\n// %-8.3f -> 1.235___                 //3\u4f4d\u5c0f\u6570\u6d6e\u70b9,\u5360\u4f4d8\u4e2a\u5b57\u7b26\u4f4d,\u5de6\u5bf9\u9f50\n// %08.3f -> 0001.235                 //3\u4f4d\u5c0f\u6570\u6d6e\u70b9,\u5360\u4f4d8\u4e2a\u5b57\u7b26\u4f4d,\u5de6\u8865\u51683\u4e2a0\n// %+8.3f -> __+1.235 (+ shows sign)  //3\u4f4d\u5c0f\u6570\u6d6e\u70b9,\u5360\u4f4d8\u4e2a\u5b57\u7b26\u4f4d,\u6570\u5b57\u524d\u7f00+\n\n\n// integer = 256\n// %[+-][0][length]d\n\n// %6d  -> ___256            //\u6574\u6570,\u5360\u4f4d6\u4e2a\u5b57\u7b26\u4f4d\n// %+6d -> __+256            //\u6574\u6570,\u5360\u4f4d6\u4e2a\u5b57\u7b26\u4f4d,\u6570\u5b57\u524d\u7f00+\n// %-6d -> 256___            //\u6574\u6570,\u5360\u4f4d6\u4e2a\u5b57\u7b26\u4f4d,\u5de6\u5bf9\u9f50\n// %06d -> 000256            //\u6574\u6570,\u5360\u4f4d6\u4e2a\u5b57\u7b26\u4f4d,\u5de6\u8865\u51683\u4e2a0\n\nprintf(\"\\n\");\n\n// escaping characters in string                                                   //\u5b57\u7b26\u4e32\u4e2d\u7684\u8f6c\u4e49\u5b57\u7b26\n// from my testing it requires 4 more backslashes to escape \\n                     //\u4ece\u6211\u7684\u6d4b\u8bd5\u6765\u770b\uff0c\u5b83\u8fd8\u9700\u89814\u4e2a\u53cd\u659c\u6760\u624d\u80fd\u8f6c\u4e49\\n\n// when using raw strings, they are automatically escaped, but @ symbol still      //\u5f53\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u65f6\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u8f6c\u4e49\uff0c\u4f46@\u7b26\u53f7\u4ecd\u7136\n// needs to be escaped                                                             //\u9700\u8981\u8f6c\u4e49\u3002\n// following lines will output the same thing                                      //\u4e0b\u9762\u7684\u884c\u5c06\u8f93\u51fa\u76f8\u540c\u7684\u5185\u5bb9\n// 4 backslashes are needed probably because hscript is parsing this text field    //\u4e4b\u6240\u4ee5\u9700\u89814\u53cd\u659c\u6760\uff0c\u53ef\u80fd\u662f\u56e0\u4e3ahscript\u6b63\u5728\u89e3\u6790\u8fd9\u4e2a\u6587\u672c\u5b57\u6bb5\n// and sending to vop's field, see the node bellow                                 //\u5e76\u53d1\u9001\u5230vop\u7684\u5b57\u6bb5\uff0c\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u8282\u70b9\nstring a = 'abc \\\\\\\\\\n \\\\\\\\\\t v\\@P, %04.2f';   //\u60f3\u8981\u6253\u5370\u7c7b\u4f3c\\n \\t\u8fd9\u6837\u7684\u7279\u6b8a\u7b26\u53f7,\u9700\u8981\u524d\u7f00\u56db\u4e2a\\.  \u6253\u5370@,\u9700\u8981\u524d\u7f00\\.   \u7b80\u5355\u7406\u89e3:  \\\\\\\\\\n = \\n   \\\\\\\\\\t = \\t  \\@ = @\nstring b = \"abc \\\\\\\\\\n \\\\\\\\\\t v\\@P, %04.2f\";   //\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u6ca1\u6709\u533a\u522b\nstring c = r\"abc \\n \\t v\\@P, %04.2f\";          //\u5728\u5f15\u53f7\u524d\u7f00r,\u4f1a\u5c4f\u853d\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\\n \\t\nstring d = R\"(abc \\n \\t v\\@P, %04.2f)\";        //R\u4e5f\u4e00\u6837,\u4f46\u591a\u4e86\u4e2a\u62ec\u53f7\n\nprintf(a + \"\\n\");\nprintf(b + \"\\n\");\nprintf(c + \"\\n\");\nprintf(d + \"\\n\"); \n\nstring multiLine = \nR\"(It is possible to easily create multi\nline strings with this syntax.\nIn some cases it might\nbe useful to do it this way,\nrather then using \\n\nHowever as you have noticed it has weird\n4 characters offset starting on the second line,\nnot sure if it is a bug or feature)\";//\u6253\u5370\u591a\u884c\u53ef\u4ee5\u7528 R\"(\u591a\u884c\u5185\u5bb9)\" \u62ec\u8d77\u6765,\u4f1a\u6709\u56db\u683c\u7684\u7f29\u8fdb\n\nprintf(multiLine + '\\n');\n\n// sprintf() \u7c7b\u4f3cprintf()\n//\u800c\u4e14\u8d77\u5230 \u5c06\u8f93\u5165\u503c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u7684\u4f5c\u7528\nstring ss = sprintf('%010d', 20180412);\nprintf('%s',ss);\n"}